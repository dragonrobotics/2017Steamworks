// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replay.proto

package org.usfirst.frc.team5002.robot.replay;

/**
 * Protobuf type {@code team5002.ControlState}
 */
public  final class ControlState extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:team5002.ControlState)
    ControlStateOrBuilder {
  // Use ControlState.newBuilder() to construct.
  private ControlState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ControlState() {
    forwardAxis_ = 0D;
    horizontalAxis_ = 0D;
    turnAxis_ = 0D;
    pOV_ = 0;
    leftTrigger_ = 0D;
    rightTrigger_ = 0D;
    buttonA_ = false;
    buttonB_ = false;
    buttonX_ = false;
    buttonY_ = false;
    buttonLB_ = false;
    buttonRB_ = false;
    buttonHome_ = false;
    buttonMenu_ = false;
    toggleFOC_ = false;
    activateLowSpeed_ = false;
    activateHighSpeed_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ControlState(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 9: {

            forwardAxis_ = input.readDouble();
            break;
          }
          case 17: {

            horizontalAxis_ = input.readDouble();
            break;
          }
          case 25: {

            turnAxis_ = input.readDouble();
            break;
          }
          case 32: {

            buttonA_ = input.readBool();
            break;
          }
          case 40: {

            buttonB_ = input.readBool();
            break;
          }
          case 48: {

            buttonX_ = input.readBool();
            break;
          }
          case 56: {

            buttonY_ = input.readBool();
            break;
          }
          case 64: {

            buttonLB_ = input.readBool();
            break;
          }
          case 72: {

            buttonRB_ = input.readBool();
            break;
          }
          case 80: {

            buttonHome_ = input.readBool();
            break;
          }
          case 88: {

            buttonMenu_ = input.readBool();
            break;
          }
          case 96: {

            toggleFOC_ = input.readBool();
            break;
          }
          case 104: {

            activateLowSpeed_ = input.readBool();
            break;
          }
          case 112: {

            activateHighSpeed_ = input.readBool();
            break;
          }
          case 120: {

            pOV_ = input.readInt32();
            break;
          }
          case 129: {

            leftTrigger_ = input.readDouble();
            break;
          }
          case 137: {

            rightTrigger_ = input.readDouble();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.usfirst.frc.team5002.robot.replay.ReplayOuterClass.internal_static_team5002_ControlState_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.usfirst.frc.team5002.robot.replay.ReplayOuterClass.internal_static_team5002_ControlState_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.usfirst.frc.team5002.robot.replay.ControlState.class, org.usfirst.frc.team5002.robot.replay.ControlState.Builder.class);
  }

  public static final int FORWARD_AXIS_FIELD_NUMBER = 1;
  private double forwardAxis_;
  /**
   * <pre>
   * Forward / backward movement axis.
   * </pre>
   *
   * <code>optional double forward_axis = 1;</code>
   */
  public double getForwardAxis() {
    return forwardAxis_;
  }

  public static final int HORIZONTAL_AXIS_FIELD_NUMBER = 2;
  private double horizontalAxis_;
  /**
   * <pre>
   * Left / right strafing axis.
   * </pre>
   *
   * <code>optional double horizontal_axis = 2;</code>
   */
  public double getHorizontalAxis() {
    return horizontalAxis_;
  }

  public static final int TURN_AXIS_FIELD_NUMBER = 3;
  private double turnAxis_;
  /**
   * <pre>
   * CW / CCW rotation axis.
   * </pre>
   *
   * <code>optional double turn_axis = 3;</code>
   */
  public double getTurnAxis() {
    return turnAxis_;
  }

  public static final int POV_FIELD_NUMBER = 15;
  private int pOV_;
  /**
   * <pre>
   * POV angle.
   * </pre>
   *
   * <code>optional int32 POV = 15;</code>
   */
  public int getPOV() {
    return pOV_;
  }

  public static final int LEFT_TRIGGER_FIELD_NUMBER = 16;
  private double leftTrigger_;
  /**
   * <pre>
   * Left trigger "axis"
   * </pre>
   *
   * <code>optional double left_trigger = 16;</code>
   */
  public double getLeftTrigger() {
    return leftTrigger_;
  }

  public static final int RIGHT_TRIGGER_FIELD_NUMBER = 17;
  private double rightTrigger_;
  /**
   * <pre>
   * Right trigger "axis"
   * </pre>
   *
   * <code>optional double right_trigger = 17;</code>
   */
  public double getRightTrigger() {
    return rightTrigger_;
  }

  public static final int BUTTON_A_FIELD_NUMBER = 4;
  private boolean buttonA_;
  /**
   * <pre>
   * Button ID = 1
   * </pre>
   *
   * <code>optional bool button_A = 4;</code>
   */
  public boolean getButtonA() {
    return buttonA_;
  }

  public static final int BUTTON_B_FIELD_NUMBER = 5;
  private boolean buttonB_;
  /**
   * <pre>
   * Button ID = 2
   * </pre>
   *
   * <code>optional bool button_B = 5;</code>
   */
  public boolean getButtonB() {
    return buttonB_;
  }

  public static final int BUTTON_X_FIELD_NUMBER = 6;
  private boolean buttonX_;
  /**
   * <pre>
   * Button ID = 3
   * </pre>
   *
   * <code>optional bool button_X = 6;</code>
   */
  public boolean getButtonX() {
    return buttonX_;
  }

  public static final int BUTTON_Y_FIELD_NUMBER = 7;
  private boolean buttonY_;
  /**
   * <pre>
   * Button ID = 4
   * </pre>
   *
   * <code>optional bool button_Y = 7;</code>
   */
  public boolean getButtonY() {
    return buttonY_;
  }

  public static final int BUTTON_LB_FIELD_NUMBER = 8;
  private boolean buttonLB_;
  /**
   * <pre>
   * Button ID = 5
   * </pre>
   *
   * <code>optional bool button_LB = 8;</code>
   */
  public boolean getButtonLB() {
    return buttonLB_;
  }

  public static final int BUTTON_RB_FIELD_NUMBER = 9;
  private boolean buttonRB_;
  /**
   * <pre>
   * Button ID = 6
   * </pre>
   *
   * <code>optional bool button_RB = 9;</code>
   */
  public boolean getButtonRB() {
    return buttonRB_;
  }

  public static final int BUTTON_HOME_FIELD_NUMBER = 10;
  private boolean buttonHome_;
  /**
   * <pre>
   * Button ID = 7
   * </pre>
   *
   * <code>optional bool button_home = 10;</code>
   */
  public boolean getButtonHome() {
    return buttonHome_;
  }

  public static final int BUTTON_MENU_FIELD_NUMBER = 11;
  private boolean buttonMenu_;
  /**
   * <pre>
   * Button ID = 8
   * </pre>
   *
   * <code>optional bool button_menu = 11;</code>
   */
  public boolean getButtonMenu() {
    return buttonMenu_;
  }

  public static final int TOGGLE_FOC_FIELD_NUMBER = 12;
  private boolean toggleFOC_;
  /**
   * <pre>
   * Button ID = 7 (alias of menu?)
   * </pre>
   *
   * <code>optional bool toggle_FOC = 12;</code>
   */
  public boolean getToggleFOC() {
    return toggleFOC_;
  }

  public static final int ACTIVATE_LOW_SPEED_FIELD_NUMBER = 13;
  private boolean activateLowSpeed_;
  /**
   * <pre>
   * button ID = 10 (left paddle)
   * </pre>
   *
   * <code>optional bool activate_low_speed = 13;</code>
   */
  public boolean getActivateLowSpeed() {
    return activateLowSpeed_;
  }

  public static final int ACTIVATE_HIGH_SPEED_FIELD_NUMBER = 14;
  private boolean activateHighSpeed_;
  /**
   * <pre>
   * button ID = 11 (right paddle)
   * </pre>
   *
   * <code>optional bool activate_high_speed = 14;</code>
   */
  public boolean getActivateHighSpeed() {
    return activateHighSpeed_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (forwardAxis_ != 0D) {
      output.writeDouble(1, forwardAxis_);
    }
    if (horizontalAxis_ != 0D) {
      output.writeDouble(2, horizontalAxis_);
    }
    if (turnAxis_ != 0D) {
      output.writeDouble(3, turnAxis_);
    }
    if (buttonA_ != false) {
      output.writeBool(4, buttonA_);
    }
    if (buttonB_ != false) {
      output.writeBool(5, buttonB_);
    }
    if (buttonX_ != false) {
      output.writeBool(6, buttonX_);
    }
    if (buttonY_ != false) {
      output.writeBool(7, buttonY_);
    }
    if (buttonLB_ != false) {
      output.writeBool(8, buttonLB_);
    }
    if (buttonRB_ != false) {
      output.writeBool(9, buttonRB_);
    }
    if (buttonHome_ != false) {
      output.writeBool(10, buttonHome_);
    }
    if (buttonMenu_ != false) {
      output.writeBool(11, buttonMenu_);
    }
    if (toggleFOC_ != false) {
      output.writeBool(12, toggleFOC_);
    }
    if (activateLowSpeed_ != false) {
      output.writeBool(13, activateLowSpeed_);
    }
    if (activateHighSpeed_ != false) {
      output.writeBool(14, activateHighSpeed_);
    }
    if (pOV_ != 0) {
      output.writeInt32(15, pOV_);
    }
    if (leftTrigger_ != 0D) {
      output.writeDouble(16, leftTrigger_);
    }
    if (rightTrigger_ != 0D) {
      output.writeDouble(17, rightTrigger_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (forwardAxis_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, forwardAxis_);
    }
    if (horizontalAxis_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, horizontalAxis_);
    }
    if (turnAxis_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, turnAxis_);
    }
    if (buttonA_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, buttonA_);
    }
    if (buttonB_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, buttonB_);
    }
    if (buttonX_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, buttonX_);
    }
    if (buttonY_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, buttonY_);
    }
    if (buttonLB_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, buttonLB_);
    }
    if (buttonRB_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, buttonRB_);
    }
    if (buttonHome_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, buttonHome_);
    }
    if (buttonMenu_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, buttonMenu_);
    }
    if (toggleFOC_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, toggleFOC_);
    }
    if (activateLowSpeed_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(13, activateLowSpeed_);
    }
    if (activateHighSpeed_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(14, activateHighSpeed_);
    }
    if (pOV_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, pOV_);
    }
    if (leftTrigger_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(16, leftTrigger_);
    }
    if (rightTrigger_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(17, rightTrigger_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.usfirst.frc.team5002.robot.replay.ControlState)) {
      return super.equals(obj);
    }
    org.usfirst.frc.team5002.robot.replay.ControlState other = (org.usfirst.frc.team5002.robot.replay.ControlState) obj;

    boolean result = true;
    result = result && (
        java.lang.Double.doubleToLongBits(getForwardAxis())
        == java.lang.Double.doubleToLongBits(
            other.getForwardAxis()));
    result = result && (
        java.lang.Double.doubleToLongBits(getHorizontalAxis())
        == java.lang.Double.doubleToLongBits(
            other.getHorizontalAxis()));
    result = result && (
        java.lang.Double.doubleToLongBits(getTurnAxis())
        == java.lang.Double.doubleToLongBits(
            other.getTurnAxis()));
    result = result && (getPOV()
        == other.getPOV());
    result = result && (
        java.lang.Double.doubleToLongBits(getLeftTrigger())
        == java.lang.Double.doubleToLongBits(
            other.getLeftTrigger()));
    result = result && (
        java.lang.Double.doubleToLongBits(getRightTrigger())
        == java.lang.Double.doubleToLongBits(
            other.getRightTrigger()));
    result = result && (getButtonA()
        == other.getButtonA());
    result = result && (getButtonB()
        == other.getButtonB());
    result = result && (getButtonX()
        == other.getButtonX());
    result = result && (getButtonY()
        == other.getButtonY());
    result = result && (getButtonLB()
        == other.getButtonLB());
    result = result && (getButtonRB()
        == other.getButtonRB());
    result = result && (getButtonHome()
        == other.getButtonHome());
    result = result && (getButtonMenu()
        == other.getButtonMenu());
    result = result && (getToggleFOC()
        == other.getToggleFOC());
    result = result && (getActivateLowSpeed()
        == other.getActivateLowSpeed());
    result = result && (getActivateHighSpeed()
        == other.getActivateHighSpeed());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + FORWARD_AXIS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getForwardAxis()));
    hash = (37 * hash) + HORIZONTAL_AXIS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getHorizontalAxis()));
    hash = (37 * hash) + TURN_AXIS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getTurnAxis()));
    hash = (37 * hash) + POV_FIELD_NUMBER;
    hash = (53 * hash) + getPOV();
    hash = (37 * hash) + LEFT_TRIGGER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getLeftTrigger()));
    hash = (37 * hash) + RIGHT_TRIGGER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getRightTrigger()));
    hash = (37 * hash) + BUTTON_A_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonA());
    hash = (37 * hash) + BUTTON_B_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonB());
    hash = (37 * hash) + BUTTON_X_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonX());
    hash = (37 * hash) + BUTTON_Y_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonY());
    hash = (37 * hash) + BUTTON_LB_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonLB());
    hash = (37 * hash) + BUTTON_RB_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonRB());
    hash = (37 * hash) + BUTTON_HOME_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonHome());
    hash = (37 * hash) + BUTTON_MENU_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getButtonMenu());
    hash = (37 * hash) + TOGGLE_FOC_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getToggleFOC());
    hash = (37 * hash) + ACTIVATE_LOW_SPEED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getActivateLowSpeed());
    hash = (37 * hash) + ACTIVATE_HIGH_SPEED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getActivateHighSpeed());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.usfirst.frc.team5002.robot.replay.ControlState parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.usfirst.frc.team5002.robot.replay.ControlState prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code team5002.ControlState}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:team5002.ControlState)
      org.usfirst.frc.team5002.robot.replay.ControlStateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.usfirst.frc.team5002.robot.replay.ReplayOuterClass.internal_static_team5002_ControlState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.usfirst.frc.team5002.robot.replay.ReplayOuterClass.internal_static_team5002_ControlState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.usfirst.frc.team5002.robot.replay.ControlState.class, org.usfirst.frc.team5002.robot.replay.ControlState.Builder.class);
    }

    // Construct using org.usfirst.frc.team5002.robot.replay.ControlState.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      forwardAxis_ = 0D;

      horizontalAxis_ = 0D;

      turnAxis_ = 0D;

      pOV_ = 0;

      leftTrigger_ = 0D;

      rightTrigger_ = 0D;

      buttonA_ = false;

      buttonB_ = false;

      buttonX_ = false;

      buttonY_ = false;

      buttonLB_ = false;

      buttonRB_ = false;

      buttonHome_ = false;

      buttonMenu_ = false;

      toggleFOC_ = false;

      activateLowSpeed_ = false;

      activateHighSpeed_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.usfirst.frc.team5002.robot.replay.ReplayOuterClass.internal_static_team5002_ControlState_descriptor;
    }

    public org.usfirst.frc.team5002.robot.replay.ControlState getDefaultInstanceForType() {
      return org.usfirst.frc.team5002.robot.replay.ControlState.getDefaultInstance();
    }

    public org.usfirst.frc.team5002.robot.replay.ControlState build() {
      org.usfirst.frc.team5002.robot.replay.ControlState result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.usfirst.frc.team5002.robot.replay.ControlState buildPartial() {
      org.usfirst.frc.team5002.robot.replay.ControlState result = new org.usfirst.frc.team5002.robot.replay.ControlState(this);
      result.forwardAxis_ = forwardAxis_;
      result.horizontalAxis_ = horizontalAxis_;
      result.turnAxis_ = turnAxis_;
      result.pOV_ = pOV_;
      result.leftTrigger_ = leftTrigger_;
      result.rightTrigger_ = rightTrigger_;
      result.buttonA_ = buttonA_;
      result.buttonB_ = buttonB_;
      result.buttonX_ = buttonX_;
      result.buttonY_ = buttonY_;
      result.buttonLB_ = buttonLB_;
      result.buttonRB_ = buttonRB_;
      result.buttonHome_ = buttonHome_;
      result.buttonMenu_ = buttonMenu_;
      result.toggleFOC_ = toggleFOC_;
      result.activateLowSpeed_ = activateLowSpeed_;
      result.activateHighSpeed_ = activateHighSpeed_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.usfirst.frc.team5002.robot.replay.ControlState) {
        return mergeFrom((org.usfirst.frc.team5002.robot.replay.ControlState)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.usfirst.frc.team5002.robot.replay.ControlState other) {
      if (other == org.usfirst.frc.team5002.robot.replay.ControlState.getDefaultInstance()) return this;
      if (other.getForwardAxis() != 0D) {
        setForwardAxis(other.getForwardAxis());
      }
      if (other.getHorizontalAxis() != 0D) {
        setHorizontalAxis(other.getHorizontalAxis());
      }
      if (other.getTurnAxis() != 0D) {
        setTurnAxis(other.getTurnAxis());
      }
      if (other.getPOV() != 0) {
        setPOV(other.getPOV());
      }
      if (other.getLeftTrigger() != 0D) {
        setLeftTrigger(other.getLeftTrigger());
      }
      if (other.getRightTrigger() != 0D) {
        setRightTrigger(other.getRightTrigger());
      }
      if (other.getButtonA() != false) {
        setButtonA(other.getButtonA());
      }
      if (other.getButtonB() != false) {
        setButtonB(other.getButtonB());
      }
      if (other.getButtonX() != false) {
        setButtonX(other.getButtonX());
      }
      if (other.getButtonY() != false) {
        setButtonY(other.getButtonY());
      }
      if (other.getButtonLB() != false) {
        setButtonLB(other.getButtonLB());
      }
      if (other.getButtonRB() != false) {
        setButtonRB(other.getButtonRB());
      }
      if (other.getButtonHome() != false) {
        setButtonHome(other.getButtonHome());
      }
      if (other.getButtonMenu() != false) {
        setButtonMenu(other.getButtonMenu());
      }
      if (other.getToggleFOC() != false) {
        setToggleFOC(other.getToggleFOC());
      }
      if (other.getActivateLowSpeed() != false) {
        setActivateLowSpeed(other.getActivateLowSpeed());
      }
      if (other.getActivateHighSpeed() != false) {
        setActivateHighSpeed(other.getActivateHighSpeed());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.usfirst.frc.team5002.robot.replay.ControlState parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.usfirst.frc.team5002.robot.replay.ControlState) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private double forwardAxis_ ;
    /**
     * <pre>
     * Forward / backward movement axis.
     * </pre>
     *
     * <code>optional double forward_axis = 1;</code>
     */
    public double getForwardAxis() {
      return forwardAxis_;
    }
    /**
     * <pre>
     * Forward / backward movement axis.
     * </pre>
     *
     * <code>optional double forward_axis = 1;</code>
     */
    public Builder setForwardAxis(double value) {
      
      forwardAxis_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Forward / backward movement axis.
     * </pre>
     *
     * <code>optional double forward_axis = 1;</code>
     */
    public Builder clearForwardAxis() {
      
      forwardAxis_ = 0D;
      onChanged();
      return this;
    }

    private double horizontalAxis_ ;
    /**
     * <pre>
     * Left / right strafing axis.
     * </pre>
     *
     * <code>optional double horizontal_axis = 2;</code>
     */
    public double getHorizontalAxis() {
      return horizontalAxis_;
    }
    /**
     * <pre>
     * Left / right strafing axis.
     * </pre>
     *
     * <code>optional double horizontal_axis = 2;</code>
     */
    public Builder setHorizontalAxis(double value) {
      
      horizontalAxis_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Left / right strafing axis.
     * </pre>
     *
     * <code>optional double horizontal_axis = 2;</code>
     */
    public Builder clearHorizontalAxis() {
      
      horizontalAxis_ = 0D;
      onChanged();
      return this;
    }

    private double turnAxis_ ;
    /**
     * <pre>
     * CW / CCW rotation axis.
     * </pre>
     *
     * <code>optional double turn_axis = 3;</code>
     */
    public double getTurnAxis() {
      return turnAxis_;
    }
    /**
     * <pre>
     * CW / CCW rotation axis.
     * </pre>
     *
     * <code>optional double turn_axis = 3;</code>
     */
    public Builder setTurnAxis(double value) {
      
      turnAxis_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * CW / CCW rotation axis.
     * </pre>
     *
     * <code>optional double turn_axis = 3;</code>
     */
    public Builder clearTurnAxis() {
      
      turnAxis_ = 0D;
      onChanged();
      return this;
    }

    private int pOV_ ;
    /**
     * <pre>
     * POV angle.
     * </pre>
     *
     * <code>optional int32 POV = 15;</code>
     */
    public int getPOV() {
      return pOV_;
    }
    /**
     * <pre>
     * POV angle.
     * </pre>
     *
     * <code>optional int32 POV = 15;</code>
     */
    public Builder setPOV(int value) {
      
      pOV_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * POV angle.
     * </pre>
     *
     * <code>optional int32 POV = 15;</code>
     */
    public Builder clearPOV() {
      
      pOV_ = 0;
      onChanged();
      return this;
    }

    private double leftTrigger_ ;
    /**
     * <pre>
     * Left trigger "axis"
     * </pre>
     *
     * <code>optional double left_trigger = 16;</code>
     */
    public double getLeftTrigger() {
      return leftTrigger_;
    }
    /**
     * <pre>
     * Left trigger "axis"
     * </pre>
     *
     * <code>optional double left_trigger = 16;</code>
     */
    public Builder setLeftTrigger(double value) {
      
      leftTrigger_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Left trigger "axis"
     * </pre>
     *
     * <code>optional double left_trigger = 16;</code>
     */
    public Builder clearLeftTrigger() {
      
      leftTrigger_ = 0D;
      onChanged();
      return this;
    }

    private double rightTrigger_ ;
    /**
     * <pre>
     * Right trigger "axis"
     * </pre>
     *
     * <code>optional double right_trigger = 17;</code>
     */
    public double getRightTrigger() {
      return rightTrigger_;
    }
    /**
     * <pre>
     * Right trigger "axis"
     * </pre>
     *
     * <code>optional double right_trigger = 17;</code>
     */
    public Builder setRightTrigger(double value) {
      
      rightTrigger_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Right trigger "axis"
     * </pre>
     *
     * <code>optional double right_trigger = 17;</code>
     */
    public Builder clearRightTrigger() {
      
      rightTrigger_ = 0D;
      onChanged();
      return this;
    }

    private boolean buttonA_ ;
    /**
     * <pre>
     * Button ID = 1
     * </pre>
     *
     * <code>optional bool button_A = 4;</code>
     */
    public boolean getButtonA() {
      return buttonA_;
    }
    /**
     * <pre>
     * Button ID = 1
     * </pre>
     *
     * <code>optional bool button_A = 4;</code>
     */
    public Builder setButtonA(boolean value) {
      
      buttonA_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 1
     * </pre>
     *
     * <code>optional bool button_A = 4;</code>
     */
    public Builder clearButtonA() {
      
      buttonA_ = false;
      onChanged();
      return this;
    }

    private boolean buttonB_ ;
    /**
     * <pre>
     * Button ID = 2
     * </pre>
     *
     * <code>optional bool button_B = 5;</code>
     */
    public boolean getButtonB() {
      return buttonB_;
    }
    /**
     * <pre>
     * Button ID = 2
     * </pre>
     *
     * <code>optional bool button_B = 5;</code>
     */
    public Builder setButtonB(boolean value) {
      
      buttonB_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 2
     * </pre>
     *
     * <code>optional bool button_B = 5;</code>
     */
    public Builder clearButtonB() {
      
      buttonB_ = false;
      onChanged();
      return this;
    }

    private boolean buttonX_ ;
    /**
     * <pre>
     * Button ID = 3
     * </pre>
     *
     * <code>optional bool button_X = 6;</code>
     */
    public boolean getButtonX() {
      return buttonX_;
    }
    /**
     * <pre>
     * Button ID = 3
     * </pre>
     *
     * <code>optional bool button_X = 6;</code>
     */
    public Builder setButtonX(boolean value) {
      
      buttonX_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 3
     * </pre>
     *
     * <code>optional bool button_X = 6;</code>
     */
    public Builder clearButtonX() {
      
      buttonX_ = false;
      onChanged();
      return this;
    }

    private boolean buttonY_ ;
    /**
     * <pre>
     * Button ID = 4
     * </pre>
     *
     * <code>optional bool button_Y = 7;</code>
     */
    public boolean getButtonY() {
      return buttonY_;
    }
    /**
     * <pre>
     * Button ID = 4
     * </pre>
     *
     * <code>optional bool button_Y = 7;</code>
     */
    public Builder setButtonY(boolean value) {
      
      buttonY_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 4
     * </pre>
     *
     * <code>optional bool button_Y = 7;</code>
     */
    public Builder clearButtonY() {
      
      buttonY_ = false;
      onChanged();
      return this;
    }

    private boolean buttonLB_ ;
    /**
     * <pre>
     * Button ID = 5
     * </pre>
     *
     * <code>optional bool button_LB = 8;</code>
     */
    public boolean getButtonLB() {
      return buttonLB_;
    }
    /**
     * <pre>
     * Button ID = 5
     * </pre>
     *
     * <code>optional bool button_LB = 8;</code>
     */
    public Builder setButtonLB(boolean value) {
      
      buttonLB_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 5
     * </pre>
     *
     * <code>optional bool button_LB = 8;</code>
     */
    public Builder clearButtonLB() {
      
      buttonLB_ = false;
      onChanged();
      return this;
    }

    private boolean buttonRB_ ;
    /**
     * <pre>
     * Button ID = 6
     * </pre>
     *
     * <code>optional bool button_RB = 9;</code>
     */
    public boolean getButtonRB() {
      return buttonRB_;
    }
    /**
     * <pre>
     * Button ID = 6
     * </pre>
     *
     * <code>optional bool button_RB = 9;</code>
     */
    public Builder setButtonRB(boolean value) {
      
      buttonRB_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 6
     * </pre>
     *
     * <code>optional bool button_RB = 9;</code>
     */
    public Builder clearButtonRB() {
      
      buttonRB_ = false;
      onChanged();
      return this;
    }

    private boolean buttonHome_ ;
    /**
     * <pre>
     * Button ID = 7
     * </pre>
     *
     * <code>optional bool button_home = 10;</code>
     */
    public boolean getButtonHome() {
      return buttonHome_;
    }
    /**
     * <pre>
     * Button ID = 7
     * </pre>
     *
     * <code>optional bool button_home = 10;</code>
     */
    public Builder setButtonHome(boolean value) {
      
      buttonHome_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 7
     * </pre>
     *
     * <code>optional bool button_home = 10;</code>
     */
    public Builder clearButtonHome() {
      
      buttonHome_ = false;
      onChanged();
      return this;
    }

    private boolean buttonMenu_ ;
    /**
     * <pre>
     * Button ID = 8
     * </pre>
     *
     * <code>optional bool button_menu = 11;</code>
     */
    public boolean getButtonMenu() {
      return buttonMenu_;
    }
    /**
     * <pre>
     * Button ID = 8
     * </pre>
     *
     * <code>optional bool button_menu = 11;</code>
     */
    public Builder setButtonMenu(boolean value) {
      
      buttonMenu_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 8
     * </pre>
     *
     * <code>optional bool button_menu = 11;</code>
     */
    public Builder clearButtonMenu() {
      
      buttonMenu_ = false;
      onChanged();
      return this;
    }

    private boolean toggleFOC_ ;
    /**
     * <pre>
     * Button ID = 7 (alias of menu?)
     * </pre>
     *
     * <code>optional bool toggle_FOC = 12;</code>
     */
    public boolean getToggleFOC() {
      return toggleFOC_;
    }
    /**
     * <pre>
     * Button ID = 7 (alias of menu?)
     * </pre>
     *
     * <code>optional bool toggle_FOC = 12;</code>
     */
    public Builder setToggleFOC(boolean value) {
      
      toggleFOC_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Button ID = 7 (alias of menu?)
     * </pre>
     *
     * <code>optional bool toggle_FOC = 12;</code>
     */
    public Builder clearToggleFOC() {
      
      toggleFOC_ = false;
      onChanged();
      return this;
    }

    private boolean activateLowSpeed_ ;
    /**
     * <pre>
     * button ID = 10 (left paddle)
     * </pre>
     *
     * <code>optional bool activate_low_speed = 13;</code>
     */
    public boolean getActivateLowSpeed() {
      return activateLowSpeed_;
    }
    /**
     * <pre>
     * button ID = 10 (left paddle)
     * </pre>
     *
     * <code>optional bool activate_low_speed = 13;</code>
     */
    public Builder setActivateLowSpeed(boolean value) {
      
      activateLowSpeed_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * button ID = 10 (left paddle)
     * </pre>
     *
     * <code>optional bool activate_low_speed = 13;</code>
     */
    public Builder clearActivateLowSpeed() {
      
      activateLowSpeed_ = false;
      onChanged();
      return this;
    }

    private boolean activateHighSpeed_ ;
    /**
     * <pre>
     * button ID = 11 (right paddle)
     * </pre>
     *
     * <code>optional bool activate_high_speed = 14;</code>
     */
    public boolean getActivateHighSpeed() {
      return activateHighSpeed_;
    }
    /**
     * <pre>
     * button ID = 11 (right paddle)
     * </pre>
     *
     * <code>optional bool activate_high_speed = 14;</code>
     */
    public Builder setActivateHighSpeed(boolean value) {
      
      activateHighSpeed_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * button ID = 11 (right paddle)
     * </pre>
     *
     * <code>optional bool activate_high_speed = 14;</code>
     */
    public Builder clearActivateHighSpeed() {
      
      activateHighSpeed_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:team5002.ControlState)
  }

  // @@protoc_insertion_point(class_scope:team5002.ControlState)
  private static final org.usfirst.frc.team5002.robot.replay.ControlState DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.usfirst.frc.team5002.robot.replay.ControlState();
  }

  public static org.usfirst.frc.team5002.robot.replay.ControlState getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ControlState>
      PARSER = new com.google.protobuf.AbstractParser<ControlState>() {
    public ControlState parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ControlState(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ControlState> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ControlState> getParserForType() {
    return PARSER;
  }

  public org.usfirst.frc.team5002.robot.replay.ControlState getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

